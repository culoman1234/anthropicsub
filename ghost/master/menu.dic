//---------------------------Menus--------------------------
//This .dic file is primarily concerned with the double-click menus for each of your ghosts. If you don't want to have menus for your characters, you'd just have to delete the OnMouseDoubleClick functions near the end of mouse.dic and then ignore this file, as none of it will be called I believe. Menus can be cool though, since you can put stuff in them and create new functions if you know what you're doing. For example, I've added a lot of games and interactions and little linked icons to my Hunter Smoker ghost to keep track of their feelings and such. Much of that is pretty complicated though (and kind of messy, cough), so I won't go into it here, but I covered some of the concepts in the coding page of the walkthrough, and enterprising ghost makers can study the menu.dic file I set up for Hunter/Smoker and see how I put it together.
//Anyway, menu.dic also contains the settings for a config menu that will let your user change their name or pronouns if they want, as well as the talk rate of the ghost, all of which are useful things for your ghost to do. So think hard about whether or not you want to skip this file or not.

OpenSakuraMenu
{
		"\0\s[0]\b2This is the first random menu open dialogue."
		"\0\s[0]\b2This is the second random menu open dialogue."
		"\0\s[0]\b2This is the third random menu open dialogue."
		--
		MenuRun
}

//--MenuRun

MenuRun
 {	
 	wd = GetWeekDay
 	ap = GetAP
 	nowmin = Getnowmin
 	nowhour = Getnowhour
	--
	"\n\n\_q\b2" //The \n\n means two new lines as detailed in the walkthrough, and \_q means quick session, meaning all the text from this point on will display instantly instead of a few letters at a time like normal ghost dialogue.
	--
	if lastTalk != "" //What this does is check to see if the ghost has already said a random bit of dialogue on its own, essentially by seeing if the lastTalk thing is NOT empty (!= means "does not equal").
	{
	  "\![*]\q[Repeat Last Dialogue,OnLastTalk]\n\n[half]"
	  //If the ghost has said something, it will then display this menu option. You can replace "Repeat Last Dialogue" with whatever caption you like, such as "What were you saying?" or "What did you say?" or "Could you repeat that?" or something like that.
	  
	  //*********************Advanced User Info*******************************
	  //These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.
	  
	  //***********************************************************************
	}
	--
 	"\![*]\q[Say something,OnAiTalk]\n"
	"\![*]\q[Say something 2,OnAiTalk]\n"
	
	--
	"\![*]\q[Config Menu,configmenu]\n/
	\![*]\q[Functions,dosomething]\n\n[half]/
 	\![*]\q[Nevermind,CANCEL]\n\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
	
}

//Leave this alone
OnLastTalk 
{
"%(lastTalk)\e"
}

GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

GetAP
{
 	if hour >= 0 && hour <= 11
 		{"AM"}
 	else
 		{"PM"}
}

Getnowmin
{
	if minute >= 0 && minute <=9
		{"0%(minute)"}
	else
		{"%(minute)"}
}

Getnowhour
{
	if hour12 >= 0 && hour12 <=9
		{"0%(hour12)"}
	else
		{"%(hour12)"}
}


Select.BACKTOMENU
	{
		MenuRun
	}

//If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
	{
		TalkConfig
	}


TalkConfig
{
	"\0\b[2]\_q\" 
	--
	"f[bold,1]Your name:\f[bold,0] %(username) \f[sup,1](\q[Change it?,TEACHNAME])\f[sup,0]\n"
	--
	"\f[bold,1]Your pronouns:\f[bold,0] %(heshe)/%(himher)/%(hisher) \f[sup,1](\q[Change them?,TEACHPRONOUN])\f[sup,0]\n"
	--
	"\f[bold,1]Your birthday:\f[bold,0] %(birthdayprint) \f[sup,1](\q[Change it?,TEACHBDAY])\f[sup,0]\n\n"
	--
	"\f[bold,1]Talk Rate:\f[bold,0] - every %(talktime) \f[sup,1](\q[Change it,talkinter])\f[sup,0]\n\n"
	--		
		{
		"\![*]Enable Uninstall? (NOW : %(deleteshitai))\n\q[ON,deleteon] \q[OFF,deleteoff]\n\n[half]\n"
		}
	--
	"\![*]\q[Back to the menu,BACKTOMENU]\e"
}

Select.TEACHPRONOUN
{
	"\0\s[0]What pronouns do you want?\w5\n\n[half]\_q/
		\![*]\q[He-His-Him,choicemasc]\n/
		\![*]\q[She-Her-Her,choicefem]\n/	
		\![*]\q[They-Their-Them,choiceneither]\e"
}

Select.choicemasc
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	"\0\s[0]The pronouns are now he him and his.\e"
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	"\0\s[0]The pronouns are now she her and her.\e"
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	hesshes = "they're"
	--
	"\0\s[0]The pronouns are now they them and their.\e"
}

Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}


//This next set of functions handles inputting the user's birthday.

Select.TEACHBDAY
	{	
		"\0\s[0]What month were you born? \w8Name or number is fine.\![open,inputbox,OnUserBornMonth,-1]\e"
	}


OnUserBornMonth
{
	_tempmonth = TOSTR(reference0) //this stores what the user put in as a variable called _tempmonth
	_tempmonth = TOLOWER(_tempmonth) //changes it to lowercase
	
	//this is attaching the right value to the input from the user
	if _tempmonth == "january" || _tempmonth == "1" {bornmonth = 1; bornmonthprint = "January"}
	elseif _tempmonth == "february" || _tempmonth == "2" {bornmonth = 2; bornmonthprint = "February"}
	elseif _tempmonth == "march" || _tempmonth == "3" {bornmonth = 3; bornmonthprint = "March"}
	elseif _tempmonth == "april" || _tempmonth == "4" {bornmonth = 4; bornmonthprint = "April"}
	elseif _tempmonth == "may" || _tempmonth == "5" {bornmonth = 5; bornmonthprint = "May"}
	elseif _tempmonth == "june" || _tempmonth == "6" {bornmonth = 6; bornmonthprint = "June"}
	elseif _tempmonth == "july" || _tempmonth == "7" {bornmonth = 7; bornmonthprint = "July"}
	elseif _tempmonth == "august" || _tempmonth == "8" {bornmonth = 8; bornmonthprint = "August"}
	elseif _tempmonth == "september" || _tempmonth == "9" {bornmonth = 9; bornmonthprint = "September"}
	elseif _tempmonth == "october" || _tempmonth == "10" {bornmonth = 10; bornmonthprint = "October"}
	elseif _tempmonth == "november" || _tempmonth == "11" {bornmonth = 11; bornmonthprint = "November"}
	elseif _tempmonth == "december" || _tempmonth == "12" {bornmonth = 12; bornmonthprint = "December"}
	
	else //if the month isn't a valid month, like 32 or something.
	{
			"\0\s[0]That's not a valid month. Try again."
			--
			"\![open,inputbox,OnUserBornMonth,-1]\![set,balloontimeout,-1]\e"
			
	}
	--
	//If it's a valid month
	
	"\0\s[0]So you were born in %(bornmonthprint).\n\w8What day was it?"
	--
	"\![open,inputbox,OnUserBornDay,-1]\![set,balloontimeout,-1]\e"
	
}


Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{	"%(bornday)st"	}
	elseif bornday == 2 || bornday == 22
	{	"%(bornday)nd"	}
	elseif bornday == 3 || bornday == 23
	{	"%(bornday)rd"	}
	else
	{	"%(bornday)th"	}
}	


OnUserBornDay
{
	_tempday = reference0 //storing the input in _tempday
	_tempday = TOLOWER(_tempday) //changes it to lowercase
	_tempday = REPLACE(_tempday,"st","") //if the user types something like 2nd, 3rd, etc, this will make it just the number. It'll just add the suffix back later on the one that actually shows.
	_tempday = REPLACE(_tempday,"nd","")
	_tempday = REPLACE(_tempday,"rd","")
	_tempday = REPLACE(_tempday,"th","")
	_tempday = TOINT(_tempday) //Converts it to an integer
	
	if ((bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12) && _tempday >= 1 && _tempday <= 31) || (bornmonth == 2 && _tempday >= 1 && _tempday <= 29) || ((bornmonth == 4 || bornmonth == 6 || bornmonth == 9 || bornmonth == 11) && _tempday >= 1 && _tempday <= 30) //This ugly function checks if the day falls into a valid range. If it does, we set some variables and continue down.
	{
		bornday = _tempday
		borndayprint = Printday
		userbirthday = "%(bornmonth)month %(bornday)day"
		birthdayprint = "%(bornmonthprint) %(borndayprint)"
		
		"%(birthchecked)"
		//Mostly defining envelopes and values in here. No need to touch any of this! Eagle-eyed readers will notice the new envelope birthchecked on its own line like a tiny king. We'll get to that momentarily, but pay it no mind for now.
	}
	else //If the day isn't valid, like the 10046th or something, this will open the input box again and have a \e so the dialogue below doesn't play. You can replace the dialogue in the first line here.
	{
		"\0\s[0]That's not a valid day. Try again."
		--
		"\![open,inputbox,OnUserBornDay,-1]\e"
	}	
}

birthchecked
{
	if userbirthday == dayslot //if today is the user's birthday
		{
			"\0\s[0]It's the user's birthday.\w8\1\s[10]Happy birthday, %(username).\e"
		}
	elseif userbirthday == "12month 25day"
		{
			"\0\s[0]The user was born on Christmas.\w8\1\s[10]Happy birthday, %(username). \w5\s[15]AND JESUS!\w8\0\s[9]\n\n[half]We're supposed to be a blank template, knock it off before we get in trouble.\e"
		}
	else //if the birthday is not listed above.
		{
			"\0\s[0]Your birthday is %(bornmonthprint) %(borndayprint). We'll remember.\e"
		}
}


Select.talkinter
 	{
 		"\0\s[0]\b2How often should we speak?\w8\1\s[10]The interval is currently set to %(talktime)./
		//note the new envelope here for %(talktime). You'll see it again in a second. You can replace the dialogue above with whatever you like, just make sure it ends with ./ and not \e.
 		\0\n\n[half]/
 		\![*]\q[Every 30 seconds,TALKMAX]\n/
		\![*]\q[Every minute,TALKHIGH]\n/
 		\![*]\q[Every 3 minutes,TALKNORMAL]\n/
		\![*]\q[Every 5 minutes,TALKPOOR]\n/
 		\![*]\q[Don't speak,TALKNONE]\n\n[half]/
		\![*]\q[Don't change,TalksTill]\e"
	}

Select.TalksTill
	{
		"\0\s[0]No change to the talk rate.\e"
	}

Select.TALKMAX
	{
 		talktime = "30 seconds" //this sets up the envelope properly
		aitalkinterval = 30 //this changes the actual rate
		
 		"\0\s[0]We will speak every 30 seconds.\e"
	}

//If the user chooses every minute.
Select.TALKHIGH
	{
 		talktime = "minute"
		aitalkinterval = 60
		
 		"\0\s[0]We will speak every minute.\e"
	}

//If the user chooses every three minutes.
Select.TALKNORMAL
	{
 		talktime = "3 minutes"
		aitalkinterval = 180
		
 		"\0\s[0]We will speak every three minutes.\e"
	}

//If the user chooses every five minutes. This is the default rate the ghost will start up in, as seen in bootend.dic.
Select.TALKPOOR
	{
 		talktime = "5 minutes"
		aitalkinterval = 300
		
 		"\1\s[10]We will speak every five minutes.\e"
	}

//If the user chooses to not have them speak.
Select.TALKNONE
	{
 		talktime = "...actually we won't talk at all"
		aitalkinterval = 0
	}

	
//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. 
Select.TEACHNAME
	{
		OnTeachName	
	}

	
//If the user selects cancel in a menu.
Select.CANCEL
	{
		"\0\s[0]This is a cancel message.\e"
		
		"\0\s[0]This is another cancel message.\e"
 	}

	

Select.dosomething
{
 		"\0\s[0]\b2This is the first function menu intro.\n\n"
 		"\0\s[0]\b2This is the second function menu intro.\n\n"
		"\0\s[0]\b2This is the third function menu intro.\n\n"
		
		--
 		"\![*]\q[Open Calendar,CALENDAR]\n/
		\![*]\q[Check Email,MailCheck]\n/
		\![*]\q[Open SSP Preferences,sspconfig]\n/
		\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n/
		\![*]\q[System Information,ChoiceSystemInformation]\n\n/
 		\![*]\q[Back to main menu,BACKTOMENU]\e"
}

//When the user clicks Open Calender. This will open the calender function of SSP, an in-built feature that you don't have to worry about in the least.
Select.CALENDAR
{
	"\0\s[0]Opening the calender.\w8\![open,calendar]\e"
	
	//You can replace the dialogue here up to the \!.
	//Advanced users, can you break it down yet? It's basically just using \! to open calender.exe or dll or whatever SSP uses to make it happen.
}

//When the user chooses SSP preferences. This will open the same window that shows up if you right click your ghost and go to Utilities - Preferences.
Select.sspconfig
{
	"\0\s[0]Opening the SSP config menu.\w8\![open,configurationdialog]\e"
	
	//Again, you can replace up to the \! tag.
}

//If the user chooses to empty the recycle bin.
Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[0]Triangle, go check the recycle bin.\w8\1\s[19]Fine.\w8\w8\s[-1]\w8\w8\w8\w8\w8\1\s[10]\cIt was empty.\e"
		
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[0]Emptying the recycle bin.\w8\1\s[19]I'm going.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\1\s[10]\cDone.\e"
		
		"\0\s[0]This is the second recycle bin emptying dialogue.\w8\1\s[19]I'm going.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\1\s[10]\cDone.\e"
		
	}
}


OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
Select.MailCheck
	{
		"\![biff]\e"
	}


	
OnChoiceTimeout
 {
	"\0\s[0]The menu has timed out.\e"
 }


OpenKeroMenu
 {
	"\1\s[10]\b[2]"
	"\1\s[15]\b[2]"
	"\1\s[16]\b[2]"
	
 	--
	"This is a menu introduction dialogue."
 	"This is another menu introduction dialogue."
 	"This is the third menu introduction dialogue."
 	"This is the fourth menu introduction dialogue."
 	--
	"\n\n[half]/
	\![*]\q[Update,keroupdatecheck]\n/
 	\![*]\q[Bug report,bugreport]\n\n/
	\![*]\q[Test variable,testvariable]\n\n/
	//When you are done with the test variable, aka your ghost is finished or you just don't want it showing up when you publish your ghost beta or whatevs, simply add two // slashes in front of \![*] to comment the line out. In Notepad++, it will turn green. When you want to use it again, erase the two slashes to turn it back to normal.
	\![*]\q[Nothing,keroCANCEL]\e"
}

Select.keroCANCEL
{
	"\1\s[10]This is menu cancel dialogue.\e"
}


Select.bugreport
{
"\1\s[10]This is the bug report dialogue. \w5Report bugs to youremailaddress@emailprovider.com. \w5We were downloaded from \_a[http://www.whereveryoupostedthem.com/]some place\_a.\e"
}

Select.keroupdatecheck
{
	"\1\s[10]\![updatebymyself]\e"
}

Select.testvariable
{
	"\1\s[10]Testing!\e"
}
